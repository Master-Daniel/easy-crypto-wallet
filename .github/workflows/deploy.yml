name: Easy Crypto Wallet 

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.12.0"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Build the Nestjs application
        run: npm run build

      - name: Archive build files
        run: tar -czf dist.tar.gz dist package.json

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Add SSH key for deploy
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Verify dist.tar.gz exists
        run: test -f dist.tar.gz && echo "File exists" || echo "File not found"

      - name: Write SSH key to file
        run: |
          echo "${{ secrets.SSH_KEY }}" > ssh_key
          chmod 600 ssh_key
          echo "SSH_PRIVATE_KEY_PATH=$(pwd)/ssh_key" >> $GITHUB_ENV

      - name: Prepare remote directory
        run: |
          ssh -i "$SSH_PRIVATE_KEY_PATH" -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.SERVER_IP }} <<EOF
          sudo mkdir -p /home/${{ secrets.USER }}/easy-crypto-wallet
          sudo chmod 755 /home/${{ secrets.USER }}/easy-crypto-wallet
          sudo chown master-daniel:master-daniel /home/${{ secrets.USER }}/easy-crypto-wallet
          EOF

      - name: Deploy to VPS
        run: |
          sudo apt-get update && sudo apt-get install -y rsync

          echo ${{ secrets.USER }}@${{ secrets.SERVER_IP }}
          rsync -avz --progress -e "ssh -i $SSH_PRIVATE_KEY_PATH -o StrictHostKeyChecking=no" dist.tar.gz ${{ secrets.USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.USER }}/easy-crypto-wallet/

          ssh -i "$SSH_PRIVATE_KEY_PATH" -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.SERVER_IP }} <<EOF
          cd /home/${{ secrets.USER }}/easy-crypto-wallet || exit 1

          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BACKUP_DIR="backup_$TIMESTAMP"

          echo "Creating backup of current deployment..."
          mkdir -p backups
          if [ -d dist ]; then
            mv dist "backups/$BACKUP_DIR"
            echo "Backup created at backups/$BACKUP_DIR"
          else
            echo "No previous build found to backup."
          fi

          echo "Extracting new build files..."
          tar -xzf dist.tar.gz

          echo "Installing dependencies..."
          npm install --omit=dev || exit 1
          EOF

          # Clean up SSH key after use
          rm -f "$SSH_PRIVATE_KEY_PATH"

      - name: Restart or Start PM2 Process
        run: |
            ssh -i "$SSH_PRIVATE_KEY_PATH" -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.SERVER_IP }} << 'EOF'
              echo "Restarting or starting PM2 process on the server..."
              cd /home/${{ secrets.USER }}/easy-crypto-wallet || exit 1
              /usr/local/apps/nodejs22/bin/pm2 restart easy-crypto-wallet-backend || \
              /usr/local/apps/nodejs22/bin/pm2 start dist/main.js --name "easy-crypto-wallet-backend" --watch
              echo "Deployment complete."
              EOF

      - name: Delete all artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            for (const artifact of artifacts.data.artifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
          github-token: ${{ secrets.PAT_TOKEN }}
